// <auto-generated />
using System;
using GESTION.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GESTION.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250524210720_doubleMigrate")]
    partial class doubleMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GESTION.model.Comment", b =>
                {
                    b.Property<int>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdComment"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdComment");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GESTION.model.Exam", b =>
                {
                    b.Property<int>("IdExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdExam"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("Uripath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UripathAN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdExam");

                    b.HasIndex("LevelId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("SessionId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("GESTION.model.ExamStudent", b =>
                {
                    b.Property<int>("IdExamStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdExamStudent"));

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("IdExamStudent");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamStudents");
                });

            modelBuilder.Entity("GESTION.model.Level", b =>
                {
                    b.Property<int>("IdLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLevel"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdLevel");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("GESTION.model.Nationality", b =>
                {
                    b.Property<int>("IdNationality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdNationality"));

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdNationality");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("GESTION.model.NoteSection", b =>
                {
                    b.Property<int>("IdNoteSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdNoteSection"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<int>("ExamStudentId")
                        .HasColumnType("integer");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("note")
                        .HasColumnType("integer");

                    b.HasKey("IdNoteSection");

                    b.HasIndex("CommentId");

                    b.HasIndex("ExamStudentId");

                    b.HasIndex("SectionId");

                    b.ToTable("NoteSections");
                });

            modelBuilder.Entity("GESTION.model.Period", b =>
                {
                    b.Property<int>("IdPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPeriod"));

                    b.Property<string>("PeriodName")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("IdPeriod");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("GESTION.model.Privilege", b =>
                {
                    b.Property<int>("IdPrivilege")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPrivilege"));

                    b.Property<string>("PrivilegeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPrivilege");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("GESTION.model.ProfLevel", b =>
                {
                    b.Property<int>("IdProfLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProfLevel"));

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("IdProfLevel");

                    b.HasIndex("LevelId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("StaffId");

                    b.ToTable("ProfLevels");
                });

            modelBuilder.Entity("GESTION.model.Section", b =>
                {
                    b.Property<int>("IdSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSection"));

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSection");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("GESTION.model.SectionScale", b =>
                {
                    b.Property<int>("IdSectionScale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSectionScale"));

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("scale")
                        .HasColumnType("integer");

                    b.HasKey("IdSectionScale");

                    b.HasIndex("LevelId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SectionScales");
                });

            modelBuilder.Entity("GESTION.model.Session", b =>
                {
                    b.Property<int>("IdSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSession"));

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSession");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("GESTION.model.Staff", b =>
                {
                    b.Property<int>("IdStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStaff"));

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StaffBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StaffEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffGender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffHome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffMartialStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffMatricule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StaffPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("IdStaff");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("VenueId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("GESTION.model.Student", b =>
                {
                    b.Property<int>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStudent"));

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StudentBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StudentEmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentGender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentHomeAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentMatricule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("IdStudent");

                    b.HasIndex("NationalityId");

                    b.HasIndex("VenueId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GESTION.model.StudentLevel", b =>
                {
                    b.Property<int>("IdStudentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStudentLevel"));

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("IdStudentLevel");

                    b.HasIndex("LevelId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLevels");
                });

            modelBuilder.Entity("GESTION.model.Subject", b =>
                {
                    b.Property<int>("IdSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSubject"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSubject");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("GESTION.model.Venue", b =>
                {
                    b.Property<int>("IdVenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVenue"));

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdVenue");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("GESTION.model.Exam", b =>
                {
                    b.HasOne("GESTION.model.Level", "Level")
                        .WithMany("Exams")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Period", "Period")
                        .WithMany("Exams")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Session", "Session")
                        .WithMany("Exams")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Period");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GESTION.model.ExamStudent", b =>
                {
                    b.HasOne("GESTION.model.Exam", "Exam")
                        .WithMany("ExamStudents")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Student", "Student")
                        .WithMany("ExamStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GESTION.model.NoteSection", b =>
                {
                    b.HasOne("GESTION.model.Comment", "Comment")
                        .WithMany("NoteSections")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.ExamStudent", "ExamStudent")
                        .WithMany("NoteSections")
                        .HasForeignKey("ExamStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Section", "Section")
                        .WithMany("NoteSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ExamStudent");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("GESTION.model.ProfLevel", b =>
                {
                    b.HasOne("GESTION.model.Level", "Level")
                        .WithMany("ProfLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Period", "Period")
                        .WithMany("ProfLevels")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Staff", "Staff")
                        .WithMany("ProfLevels")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Period");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("GESTION.model.SectionScale", b =>
                {
                    b.HasOne("GESTION.model.Level", "Level")
                        .WithMany("SectionScales")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Section", "Section")
                        .WithMany("SectionScales")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Subject", "Subject")
                        .WithMany("SectionScales")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("GESTION.model.Staff", b =>
                {
                    b.HasOne("GESTION.model.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Privilege", "Privilege")
                        .WithMany("Staffs")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");

                    b.Navigation("Privilege");

                    b.Navigation("Subject");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("GESTION.model.Student", b =>
                {
                    b.HasOne("GESTION.model.Nationality", "Nationality")
                        .WithMany("Students")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Venue", "Venue")
                        .WithMany("Students")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("GESTION.model.StudentLevel", b =>
                {
                    b.HasOne("GESTION.model.Level", "Level")
                        .WithMany("StudentLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Period", "Period")
                        .WithMany("StudentLevels")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GESTION.model.Student", "Student")
                        .WithMany("StudentLevels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Period");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GESTION.model.Comment", b =>
                {
                    b.Navigation("NoteSections");
                });

            modelBuilder.Entity("GESTION.model.Exam", b =>
                {
                    b.Navigation("ExamStudents");
                });

            modelBuilder.Entity("GESTION.model.ExamStudent", b =>
                {
                    b.Navigation("NoteSections");
                });

            modelBuilder.Entity("GESTION.model.Level", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("ProfLevels");

                    b.Navigation("SectionScales");

                    b.Navigation("StudentLevels");
                });

            modelBuilder.Entity("GESTION.model.Nationality", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("GESTION.model.Period", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("ProfLevels");

                    b.Navigation("StudentLevels");
                });

            modelBuilder.Entity("GESTION.model.Privilege", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("GESTION.model.Section", b =>
                {
                    b.Navigation("NoteSections");

                    b.Navigation("SectionScales");
                });

            modelBuilder.Entity("GESTION.model.Session", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("GESTION.model.Staff", b =>
                {
                    b.Navigation("ProfLevels");
                });

            modelBuilder.Entity("GESTION.model.Student", b =>
                {
                    b.Navigation("ExamStudents");

                    b.Navigation("StudentLevels");
                });

            modelBuilder.Entity("GESTION.model.Subject", b =>
                {
                    b.Navigation("SectionScales");
                });

            modelBuilder.Entity("GESTION.model.Venue", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
